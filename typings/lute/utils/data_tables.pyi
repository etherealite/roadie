"""
This type stub file was generated by pyright.
"""

"""
Helper methods to get data for datatables display.
"""
def supported_parser_type_criteria(): # -> str:
    "Helper to get all supported parser_types."
    ...

class DataTablesFlaskParamParser:
    """
    Parse datatables form parameters into the structure needed for
    DataTablesSqliteQuery.

    The standard datatables ajax post gives parameters like the following:

    draw: 1
    columns[0][data]: 0
    columns[0][name]: BkTitle
    columns[0][searchable]: true
    columns[0][orderable]: true

    Flask converts that to this, more or less:

    {
      draw: 1
      columns[0][data]: 0
      columns[0][name]: BkTitle
      columns[0][searchable]: true
      columns[0][orderable]: true
    }

    But the query helper requires parameters like this:

    {
      draw: 1,
      columns: [
        { data: 0, name: BkTitle, ... }
    }

    All code here adapted from https://github.com/coding-doc/
    sqlalchemy2-datatables/blob/main/src/datatables/datatable.py.
    """
    @staticmethod
    def parse_params(requestform) -> dict:
        """Parse the request (query) parameters."""
        ...
    


class DataTablesSqliteQuery:
    "Get data for datatables rendering."
    @staticmethod
    def where_and_params(searchable_cols, parameters): # -> list:
        "Build where string and get the 'where' parameters."
        ...
    
    @staticmethod
    def get_sql(base_sql, parameters): # -> dict[str, Any]:
        "Build sql used for datatables queries."
        ...
    
    @staticmethod
    def get_data(base_sql, parameters, conn): # -> dict[str, Any]:
        "Return dict required for datatables rendering."
        ...
    


