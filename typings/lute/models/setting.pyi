"""
This type stub file was generated by pyright.
"""

from lute.db import db

"""
Lute settings, in settings key-value table.
"""
class SettingBase(db.Model):
    """
    Main settings table.

    This class should not be used, it's the polymorphic base
    for UserSettings and SystemSettings.
    """
    __tablename__ = ...
    key = ...
    keytype = ...
    value = ...
    __mapper_args__ = ...
    @classmethod
    def key_exists_precheck(cls, keyname): # -> None:
        """
        Check key validity for certain actions.
        """
        ...
    
    @classmethod
    def set_value_post(cls, keyname, keyvalue): # -> None:
        """
        Post-setting value for certain keys."
        """
        ...
    
    @classmethod
    def set_value(cls, keyname, keyvalue): # -> None:
        "Set, but don't save, a setting."
        ...
    
    @classmethod
    def key_exists(cls, keyname): # -> bool:
        "True if exists."
        ...
    
    @classmethod
    def get_value(cls, keyname): # -> Any | None:
        "Get the saved key, or None if it doesn't exist."
        ...
    
    @classmethod
    def delete_key(cls, keyname): # -> None:
        "Delete a key."
        ...
    


class MissingUserSettingKeyException(Exception):
    """
    Cannot set or get unknown user keys.
    """
    ...


class UserSetting(SettingBase):
    "User setting."
    __tablename__ = ...
    __mapper_args__ = ...
    @classmethod
    def key_exists_precheck(cls, keyname): # -> None:
        """
        User keys must exist.
        """
        ...
    
    @classmethod
    def set_value_post(cls, keyname, keyvalue): # -> None:
        """
        Setting some keys runs other code.
        """
        ...
    
    @staticmethod
    def load(): # -> None:
        """
        Load missing user settings with default values.
        """
        ...
    
    @staticmethod
    def all_settings(): # -> dict:
        """
        Get dict of all settings, for rendering into Javascript global space.
        """
        ...
    


class SystemSetting(SettingBase):
    "System setting."
    __tablename__ = ...
    __mapper_args__ = ...
    @classmethod
    def get_last_backup_datetime(cls): # -> int | None:
        "Get the last_backup_datetime as int, or None."
        ...
    
    @classmethod
    def set_last_backup_datetime(cls, v): # -> None:
        "Set and save the last backup time."
        ...
    


class BackupSettings:
    """
    Convenience wrapper for current backup settings.
    Getter only.
    """
    def __init__(self) -> None:
        ...
    
    @property
    def last_backup_display_date(self): # -> str | None:
        "Return the last_backup_datetime as yyyy-mm etc., or None if not set."
        ...
    
    @staticmethod
    def get_backup_settings(): # -> BackupSettings:
        "Get BackupSettings."
        ...
    
    @property
    def time_since_last_backup(self): # -> str | None:
        """
        Return the time since the last backup. Returns None either if not set or
        it is in the future.
        Eg. "3 days ago"
        """
        ...
    


