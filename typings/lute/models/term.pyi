"""
This type stub file was generated by pyright.
"""

from lute.db import db

"""
Term entity.
"""
wordparents = ...
class TermImage(db.Model):
    "Term images."
    __tablename__ = ...
    id = ...
    term_id = ...
    term = ...
    source = ...


class TermFlashMessage(db.Model):
    "Term flash messages."
    __tablename__ = ...
    id = ...
    message = ...
    term_id = ...
    term = ...


wordtags = ...
class TermTag(db.Model):
    "Term tags."
    __tablename__ = ...
    id = ...
    text = ...
    _comment = ...
    def __init__(self, text, comment=...) -> None:
        ...
    
    @property
    def comment(self): # -> Any | str:
        "Comment getter."
        ...
    
    @comment.setter
    def comment(self, c): # -> None:
        "Set cleaned comment."
        ...
    
    @staticmethod
    def find(termtag_id): # -> TermTag | None:
        "Get by ID."
        ...
    
    @staticmethod
    def find_by_text(text): # -> TermTag | None:
        "Find a tag by text, or None if not found."
        ...
    
    @staticmethod
    def find_or_create_by_text(text): # -> TermTag:
        "Return tag or create one."
        ...
    


class TermTextChangedException(Exception):
    """
    Terms cannot change their text once saved,
    except for the text case.
    """
    ...


class Term(db.Model):
    """
    Term entity.
    """
    __tablename__ = ...
    id = ...
    language_id = ...
    _text = ...
    text_lc = ...
    status = ...
    translation = ...
    romanization = ...
    token_count = ...
    sync_status = ...
    language = ...
    term_tags = ...
    parents = ...
    children = ...
    images = ...
    term_flash_message = ...
    def __init__(self, language=..., text=...) -> None:
        ...
    
    @staticmethod
    def create_term_no_parsing(language, text): # -> Term:
        """
        Create a term, but do not reparse it during creation.

        This method is necessary because some parsers return
        different parsed tokens for a given text string based
        on its context.  The general __init__() is used for
        parsing without context, such as creating Terms from
        the UI or during CSV import.  This method is used
        when new terms are created from an already-parsed
        and already-tokenized page of text.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @property
    def text(self): # -> Any | str:
        "Get the text."
        ...
    
    @text.setter
    def text(self, textstring): # -> None:
        """
        Set the text, textlc, and token count.

        For new terms, just parse, downcase, and get the count.

        For existing terms, ensure that the actual text content has
        not changed.
        """
        ...
    
    def remove_all_term_tags(self): # -> None:
        ...
    
    def add_term_tag(self, term_tag): # -> None:
        ...
    
    def remove_term_tag(self, term_tag): # -> None:
        ...
    
    def remove_all_parents(self): # -> None:
        ...
    
    def add_parent(self, parent): # -> None:
        """
        Add valid parent, term cannot be its own parent.
        """
        ...
    
    def get_current_image(self, strip_jpeg=...): # -> None:
        "Get the current (first) image for the term."
        ...
    
    def set_current_image(self, s): # -> None:
        "Set the current image for this term."
        ...
    
    @staticmethod
    def delete_empty_images(): # -> None:
        """
        Data clean-up: delete empty images.

        The code was leaving empty images in the db, which are obviously no good.
        This is a hack to clean up the data.
        """
        ...
    
    def get_flash_message(self): # -> Any | None:
        "Get the flash message."
        ...
    
    def set_flash_message(self, m): # -> None:
        "Set a flash message to be shown at some point in the future."
        ...
    
    def pop_flash_message(self): # -> Any | None:
        "Get the flash message, and remove it from this term."
        ...
    
    @staticmethod
    def find(term_id): # -> Term | None:
        "Get by ID."
        ...
    
    @staticmethod
    def find_by_spec(spec): # -> Term | None:
        """
        Find by the given spec term's language ID and text.
        Returns None if not found.
        """
        ...
    


class Status:
    """
    Term statuses.
    """
    UNKNOWN = ...
    WELLKNOWN = ...
    IGNORED = ...


