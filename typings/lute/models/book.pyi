"""
This type stub file was generated by pyright.
"""

from lute.db import db

"""
Book entity.
"""
booktags = ...
class BookTag(db.Model):
    "Term tags."
    __tablename__ = ...
    id = ...
    text = ...
    comment = ...
    @staticmethod
    def make_book_tag(text, comment=...): # -> BookTag:
        "Create a BookTag."
        ...
    
    @staticmethod
    def find_by_text(text): # -> BookTag | None:
        "Find a tag by text, or None if not found."
        ...
    
    @staticmethod
    def find_or_create_by_text(text): # -> BookTag:
        "Return tag or create one."
        ...
    


class Book(db.Model):
    """
    Book entity.
    """
    __tablename__ = ...
    id = ...
    title = ...
    language_id = ...
    source_uri = ...
    current_tx_id = ...
    archived = ...
    audio_filename = ...
    audio_current_pos = ...
    audio_bookmarks = ...
    language = ...
    texts = ...
    book_tags = ...
    def __init__(self, title=..., language=..., source_uri=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def remove_all_book_tags(self): # -> None:
        ...
    
    def add_book_tag(self, book_tag): # -> None:
        ...
    
    def remove_book_tag(self, book_tag): # -> None:
        ...
    
    @property
    def page_count(self): # -> int:
        ...
    
    def page_in_range(self, n): # -> int:
        "Return page number that is in the book's page count."
        ...
    
    def text_at_page(self, n):
        "Return the text object at page n."
        ...
    
    def add_page_before(self, pagenum): # -> Text:
        "Add page before page n, renumber all subsequent pages, return new page."
        ...
    
    def add_page_after(self, pagenum): # -> Text:
        "Add page after page n, renumber all subsequent pages, return new page."
        ...
    
    def remove_page(self, pagenum): # -> None:
        "Remove page, renumber all subsequent pages."
        ...
    
    @property
    def is_supported(self): # -> Any:
        "True if the book's language's parser is supported."
        ...
    
    @staticmethod
    def create_book(title, language, fulltext, max_word_tokens_per_text=...): # -> Book:
        """
        Create a book with given fulltext content,
        splitting the content into separate Text objects with max
        token count.
        """
        ...
    
    @staticmethod
    def find(book_id): # -> Book | None:
        "Get by ID."
        ...
    


class Text(db.Model):
    """
    Each page in a Book.
    """
    __tablename__ = ...
    id = ...
    _text = ...
    order = ...
    _read_date = ...
    bk_id = ...
    word_count = ...
    book = ...
    bookmarks = ...
    sentences = ...
    def __init__(self, book, text, order=...) -> None:
        ...
    
    @property
    def title(self): # -> str:
        """
        Text title is the book title + page fraction.
        """
        ...
    
    @property
    def text(self): # -> Any:
        ...
    
    @text.setter
    def text(self, s): # -> None:
        ...
    
    @property
    def read_date(self): # -> Any:
        ...
    
    @read_date.setter
    def read_date(self, s): # -> None:
        ...
    
    def load_sentences(self): # -> None:
        """
        Parse the current text and create Sentence objects.
        """
        ...
    
    @staticmethod
    def find(text_id): # -> Text | None:
        "Get by ID."
        ...
    


class Sentence(db.Model):
    """
    Parsed sentences for a given Text.

    The Sentence contains the parsed tokens, joined by the zero-width string.
    """
    __tablename__ = ...
    id = ...
    tx_id = ...
    order = ...
    text_content = ...
    text = ...
    def __init__(self, text_content=..., text=..., order=...) -> None:
        ...
    
    @staticmethod
    def from_tokens(tokens, senumber): # -> Sentence:
        """
        Create a new Sentence from ParsedTokens.
        """
        ...
    


class TextBookmark(db.Model):
    """
    Bookmarks for a given Book page

    The TextBookmark includes a title
    """
    __tablename__ = ...
    id = ...
    tx_id = ...
    title = ...
    text = ...


