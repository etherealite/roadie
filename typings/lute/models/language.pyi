"""
This type stub file was generated by pyright.
"""

from lute.db import db

"""
Language entity.
"""
class LanguageDictionary(db.Model):
    """
    Language dictionary.
    """
    __tablename__ = ...
    id = ...
    language_id = ...
    language = ...
    usefor = ...
    dicttype = ...
    dicturi = ...
    is_active = ...
    sort_order = ...
    def make_uri(self): # -> str:
        "Hack add asterisk."
        ...
    


class Language(db.Model):
    """
    Language entity.
    """
    __tablename__ = ...
    id = ...
    name = ...
    dictionaries = ...
    character_substitutions = ...
    regexp_split_sentences = ...
    exceptions_split_sentences = ...
    _word_characters = ...
    right_to_left = ...
    show_romanization = ...
    parser_type = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def word_characters(self): # -> str:
        ...
    
    @word_characters.setter
    def word_characters(self, s): # -> None:
        ...
    
    def active_dict_uris(self, use_for): # -> list:
        "Get sorted uris for active dicts of correct type."
        ...
    
    @property
    def sentence_dict_uris(self): # -> list:
        ...
    
    @classmethod
    def all_dictionaries(cls): # -> dict:
        """
        All dictionaries for all languages.
        """
        ...
    
    @staticmethod
    def delete(language): # -> None:
        """
        Hacky method to delete language and all terms, books, and dicts
        associated with it.

        There is _certainly_ a better way to do this using
        Sqlalchemy relationships and cascade deletes, but I
        was running into problems with it (things not cascading,
        or warnings ("SAWarning: Object of type <Term> not in
        session, add operation along 'Language.terms' will not
        proceed") during test runs.  It would be nice to have
        a "correct" mapping, but this is good enough for now.

        TODO zzfuture fix: fix Language-Book and -Term mappings.
        """
        ...
    
    @property
    def parser(self): # -> AbstractParser:
        "Note: this throws if the parser is not supported!!!"
        ...
    
    @property
    def is_supported(self): # -> bool:
        "True if the language's parser is supported."
        ...
    
    def get_parsed_tokens(self, s): # -> List:
        ...
    
    def get_lowercase(self, s) -> str:
        ...
    
    @staticmethod
    def find(language_id): # -> Language | None:
        "Get by ID."
        ...
    
    @staticmethod
    def find_by_name(name): # -> Language | None:
        "Get by name."
        ...
    
    def to_dict(self): # -> dict:
        "Return dictionary of data, for serialization."
        ...
    
    @staticmethod
    def from_dict(d): # -> Language:
        "Create new Language from dictionary d."
        ...
    


