"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import List

"""
Common classes use for all parsing.
"""
class ParsedToken:
    """
    A single parsed token from an input text.

    As tokens are created, the class counters
    (starting with cls_) are assigned to the ParsedToken
    and then incremented appropriately.
    """
    cls_sentence_number = ...
    cls_order = ...
    @classmethod
    def reset_counters(cls): # -> None:
        """
        Reset all the counters.
        """
        ...
    
    def __init__(self, token: str, is_word: bool, is_end_of_sentence: bool = ...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class SentenceGroupIterator:
    """
    An iterator of ParsedTokens that groups them by sentence, up
    to a maximum number of tokens.
    """
    def __init__(self, tokens, maxcount=...) -> None:
        ...
    
    def count(self): # -> int:
        """
        Get count of groups that will be returned.
        """
        ...
    
    def next(self): # -> Literal[False]:
        """
        Get next sentence group.
        """
        ...
    


class AbstractParser(ABC):
    """
    Abstract parser, inherited from by all parsers.

    Attributes:
        data_directory: Optional.  A full path to a
            directory that the parser uses.  Should be
            initialized with init_data_directory().
    """
    data_directory = ...
    @classmethod
    def uses_data_directory(cls): # -> Literal[False]:
        "True if the parser needs user-supplied data."
        ...
    
    @classmethod
    def init_data_directory(cls): # -> None:
        """
        Initialize the data_directory if needed.  Not
        necessary for all parsers.
        """
        ...
    
    @classmethod
    def is_supported(cls): # -> Literal[True]:
        """
        True if the parser will work on the current system.

        Some parsers, such as Japanese, require external
        components to be present and configured.  If missing,
        this should return False.
        """
        ...
    
    @classmethod
    @abstractmethod
    def name(cls): # -> None:
        """
        Parser name, for displaying in UI.
        """
        ...
    
    @abstractmethod
    def get_parsed_tokens(self, text: str, language) -> List:
        """
        Get an array of ParsedTokens from the input text for the given language.
        """
        ...
    
    def get_reading(self, text: str): # -> None:
        """
        Get the pronunciation for the given text.  For most
        languages, this can't be automated.
        """
        ...
    
    def get_lowercase(self, text: str): # -> str:
        """
        Return the lowcase text.

        Most languages can use the built-in lowercase operation,
        but some (like Turkish) need special handling.
        """
        ...
    


