"""
This type stub file was generated by pyright.
"""

import functools
import re
from typing import List
from lute.parse.base import AbstractParser, ParsedToken

"""
Parsing for space-delimited languages.

The parser uses some Language settings (e.g., word characters) to
perform the actual parsing.

Includes classes:

- SpaceDelimitedParser
- TurkishParser
"""
class SpaceDelimitedParser(AbstractParser):
    """
    A general parser for space-delimited languages,
    such as English, French, Spanish ... etc.
    """
    @classmethod
    def name(cls): # -> Literal['Space Delimited']:
        ...
    
    @staticmethod
    @functools.lru_cache
    def compile_re_pattern(pattern: str, *args, **kwargs) -> re.Pattern:
        """Compile regular expression pattern, cache result for fast re-use."""
        ...
    
    @staticmethod
    @functools.lru_cache
    def get_default_word_characters() -> str:
        """Return default value for lang.word_characters."""
        ...
    
    @staticmethod
    @functools.lru_cache
    def get_default_regexp_split_sentences() -> str:
        """Return default value for lang.regexp_split_sentences."""
        ...
    
    def get_parsed_tokens(self, text: str, language) -> List[ParsedToken]:
        "Return parsed tokens."
        ...
    
    def preg_match_capture(self, pattern, subject): # -> list[list]:
        """
        Return the matched text and their start positions in the subject.

        E.g. search for r'cat' in "there is a CAT and a Cat" returns:
        [['CAT', 11], ['Cat', 21]]
        """
        ...
    
    def parse_para(self, text: str, lang, tokens: List[ParsedToken]): # -> None:
        """
        Parse a string, appending the tokens to the list of tokens.
        """
        ...
    


class TurkishParser(SpaceDelimitedParser):
    "Parser to handle Turkish parsing fun."
    @classmethod
    def name(cls): # -> Literal['Turkish']:
        ...
    
    def get_lowercase(self, text): # -> str:
        "Handle the funny turkish i variants."
        ...
    


