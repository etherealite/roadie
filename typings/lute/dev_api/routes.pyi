"""
This type stub file was generated by pyright.
"""

"""
Development-only routes.

These routes are accessed during acceptance tests.
The acceptance tests don't have easy access to
the db model ... at least, as far as I can tell ...
so this is a quick-and-easy way to set some test
data state.

If there's a better way to manage this, I'll change
this.

These are dangerous methods that hack on the db data without
safeguards, so they can only be run against a test_ db.
"""
bp = ...
@bp.route("/wipe_db", methods=["GET"])
def wipe_db(): # -> Response:
    "Clean it all."
    ...

@bp.route("/load_demo", methods=["GET"])
def load_demo(): # -> Response:
    "Clean out everything, and load the demo."
    ...

@bp.route("/load_demo_languages", methods=["GET"])
def load_demo_languages(): # -> Response:
    "Clean out everything, and load the demo langs with dummy dictionaries."
    ...

@bp.route("/load_demo_stories", methods=["GET"])
def load_demo_stories(): # -> Response:
    "Stories only.  No db wipe."
    ...

@bp.route("/language_ids", methods=["GET"])
def get_lang_ids(): # -> Response:
    "Get ids of all langs."
    ...

@bp.route("/delete_all_terms", methods=["GET"])
def delete_all_terms(): # -> Response:
    "Delete all the terms only."
    ...

@bp.route("/sqlresult/<string:sql>", methods=["GET"])
def sql_result(sql): # -> Response:
    "Get the sql result as json."
    ...

@bp.route("/dummy_dict/<string:langname>/<string:term>", methods=["GET"])
def dummy_language_dict(langname, term): # -> Response:
    "Fake language dictionary/term lookup."
    ...

@bp.route("/disable_parser/<string:parsername>/<string:renameto>", methods=["GET"])
def disable_parser(parsername, renameto): # -> Response:
    "Hack: rename a parser in the registry so that languages can't find it."
    ...

@bp.route("/disable_backup", methods=["GET"])
def disable_backup(): # -> Response:
    "Disables backup -- tests don't need to back up."
    ...

@bp.route("/throw_error/<message>", methods=["GET"])
def throw_error(message):
    "Throw an error to ensure handler works!"
    ...

@bp.route("/fake_story.html", methods=["GET"])
def fake_story(): # -> Response:
    "Return a fake story for import book test."
    ...

@bp.route("/temp_file_content/<filename>", methods=["GET"])
def temp_file_content(filename): # -> str:
    "Get the content of the file."
    ...

